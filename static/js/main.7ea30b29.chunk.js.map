{"version":3,"sources":["Context/CounterActions.tsx","Context/CounterState.tsx","Context/CounterContext.tsx","Components/Display/Button.tsx","Components/Display/Count.tsx","Components/Containers/CounterContainer.tsx","Context/CounterReducer.tsx","Context/CounterContextProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["INC_COUNTER","DEC_COUNTER","LIGHT_MODE","DARK_MODE","initialState","count","theme","CounterContext","createContext","state","dispatch","Button","symbol","onClick","console","log","memo","Count","bg","backgroundColor","color","CounterContainer","useContext","updateLightTheme","useCallback","type","payload","updateDarkTheme","memoIncCounter","memoDecCounter","style","counterReducer","action","incAction","decAction","lightAction","darkAction","CounterContextProvider","children","useReducer","value","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ea30b29.chunk.js","sourcesContent":["import { Theme } from './CounterState';\n\nexport const INC_COUNTER = 'INC_COUNTER';\nexport const DEC_COUNTER = 'DEC_COUNTER';\nexport const LIGHT_MODE = 'LIGHT_MODE';\nexport const DARK_MODE = 'DARK_MODE';\n\nexport type ACTION_TYPES =\n  | typeof INC_COUNTER\n  | typeof DEC_COUNTER\n  | typeof LIGHT_MODE\n  | typeof DARK_MODE;\n\nexport interface Action {\n  type: ACTION_TYPES;\n  payload: { count?: number; theme?: Theme };\n}\n\nexport interface ActionWithCount {\n  type: ACTION_TYPES;\n  payload: { count: number };\n}\n\nexport interface ActionWithTheme {\n  type: ACTION_TYPES;\n  payload: { theme: Theme };\n}\n","const LIGHT_THEME = 'LIGHT';\nconst DARK_THEME = 'DARK';\n\nexport type Theme = typeof LIGHT_THEME | typeof DARK_THEME;\n\nexport interface CounterState {\n  count: number;\n  theme: Theme;\n}\n\nexport const initialState: CounterState = { count: 0, theme: LIGHT_THEME };\n","import { createContext } from 'react';\nimport { Action } from './CounterActions';\nimport { initialState, CounterState } from './CounterState';\n\nexport const CounterContext = createContext<{\n  state: CounterState;\n  dispatch: (action: Action) => void;\n}>({\n  state: initialState,\n  dispatch: () => {},\n});\n","import React, { memo } from 'react';\n\ninterface Props {\n  symbol: string;\n  onClick: Function;\n}\n\nconst Button: React.FC<Props> = ({ symbol, onClick }) => {\n  console.log(`${symbol} Button Rendered`);\n\n  return <button onClick={() => onClick()}>{symbol}</button>;\n};\n\nexport default memo(Button);\n","import React, { memo } from 'react';\n\ninterface Props {\n  count: number;\n}\n\nconst Count: React.FC<Props> = ({ count }) => {\n  console.log('Count Rendered');\n  return <h2>{count}</h2>;\n};\n\nexport default memo(Count);\n","import React, { CSSProperties, useCallback, useContext } from 'react';\nimport {\n  DEC_COUNTER,\n  INC_COUNTER,\n  LIGHT_MODE,\n  DARK_MODE,\n} from '../../Context/CounterActions';\nimport { CounterContext } from '../../Context/CounterContext';\nimport { Theme } from '../../Context/CounterState';\nimport Button from '../Display/Button';\nimport Count from '../Display/Count';\n\nconst bg = (theme: Theme): CSSProperties =>\n  theme === 'LIGHT'\n    ? { backgroundColor: 'white', color: 'black' }\n    : { backgroundColor: 'black', color: 'white' };\n\nconst CounterContainer: React.FC = () => {\n  const {\n    state: { count, theme },\n    dispatch,\n  } = useContext(CounterContext);\n\n  const updateLightTheme: () => void = useCallback(\n    () => dispatch({ type: LIGHT_MODE, payload: { theme: 'LIGHT' } }),\n    [dispatch]\n  );\n\n  const updateDarkTheme: () => void = useCallback(\n    () => dispatch({ type: DARK_MODE, payload: { theme: 'DARK' } }),\n    [dispatch]\n  );\n\n  const memoIncCounter: () => void = useCallback(\n    () => dispatch({ type: INC_COUNTER, payload: { count: 1 } }),\n    [dispatch]\n  );\n\n  const memoDecCounter: () => void = useCallback(\n    () => dispatch({ type: DEC_COUNTER, payload: { count: 1 } }),\n    [dispatch]\n  );\n\n  console.log('Container Rendered');\n\n  return (\n    <div style={bg(theme)}>\n      <h1>{theme}</h1>\n      <Count count={count} />\n      <Button\n        symbol=\"Update Theme\"\n        onClick={theme === 'LIGHT' ? updateDarkTheme : updateLightTheme}\n      />\n      <Button symbol=\"+\" onClick={memoIncCounter} />\n      <Button symbol=\"-\" onClick={memoDecCounter} />\n    </div>\n  );\n};\n\nexport default CounterContainer;\n","import {\n  Action,\n  ActionWithCount,\n  ActionWithTheme,\n  DARK_MODE,\n  DEC_COUNTER,\n  INC_COUNTER,\n  LIGHT_MODE,\n} from './CounterActions';\nimport { CounterState, initialState } from './CounterState';\n\nexport const counterReducer: React.Reducer<CounterState, Action> = (\n  state: CounterState = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case INC_COUNTER:\n      const incAction = action as ActionWithCount;\n      return { ...state, count: state.count + incAction.payload.count };\n\n    case DEC_COUNTER:\n      const decAction = action as ActionWithCount;\n      return { ...state, count: state.count - decAction.payload.count };\n\n    case LIGHT_MODE:\n      const lightAction = action as ActionWithTheme;\n      return { ...state, theme: lightAction.payload.theme };\n\n    case DARK_MODE:\n      const darkAction = action as ActionWithTheme;\n      return { ...state, theme: darkAction.payload.theme };\n\n    default:\n      return state;\n  }\n};\n","import React, { ReactElement, useReducer } from 'react';\nimport { CounterContext } from './CounterContext';\nimport { counterReducer } from './CounterReducer';\nimport { initialState } from './CounterState';\n\ninterface Props {\n  children: ReactElement;\n}\n\nexport const CounterContextProvider: React.FC<Props> = ({ children }) => {\n  const [state, dispatch] = useReducer(counterReducer, initialState);\n\n  const value = { state, dispatch };\n\n  return (\n    <CounterContext.Provider value={value}>{children}</CounterContext.Provider>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport CounterContainer from './Components/Containers/CounterContainer';\nimport { CounterContextProvider } from './Context/CounterContextProvider';\n\nfunction App() {\n  return (\n    <CounterContextProvider>\n      <CounterContainer></CounterContainer>\n    </CounterContextProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}